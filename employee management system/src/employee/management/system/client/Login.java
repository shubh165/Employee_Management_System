package employee.management.system.client; // Package declaration for client-side codeimport javax.swing.*;             // Import Swing components for the GUIimport java.awt.*;                // Import AWT classes for GUI styling (colors, fonts, layout)import java.awt.event.*;          // Import event handling classes for actions such as button clicksimport java.io.*;                 // Import I/O classes for input and output streamsimport java.net.*;                // Import networking classes for socket communication// Login class that creates the login window, extends JFrame and handles button eventspublic class Login extends JFrame implements ActionListener {    // GUI components for username and password input    private JTextField tusername;    private JPasswordField tpassword;    // Buttons for login and going back (or exiting)    private JButton login, back;    // Socket and I/O streams for communicating with the server    private Socket clientSocket;    private PrintWriter out;    private BufferedReader in;    // Constructor to set up the login GUI and initialize socket connection    public Login() {        // Get the client socket and the I/O streams from the ConnectionManager        this.clientSocket = ConnectionManager.getClientSocket();        this.out = ConnectionManager.getOutputStream();        this.in = ConnectionManager.getInputStream();        // Create and configure a JLabel for "Username" text, position it and add it to the frame        JLabel username = new JLabel("Username");        username.setBounds(40, 20, 100, 30);    // Set position (x,y) and size (width, height)        add(username);                         // Add label to the frame        // Create the text field for the username input, set its position and add it to the frame        tusername = new JTextField();        tusername.setBounds(150, 20, 150, 30);        add(tusername);        // Create and configure a JLabel for "Password" text, set bounds and add it to the frame        JLabel password = new JLabel("Password");        password.setBounds(40, 70, 100, 30);        add(password);        // Create the password field for password input, set its position and add it to the frame        tpassword = new JPasswordField();        tpassword.setBounds(150, 70, 150, 30);        add(tpassword);        // Create a login button, configure its size, colors, and add an action listener        login = new JButton("LOGIN");        login.setBounds(150, 140, 150, 30);        login.setBackground(Color.black);        login.setForeground(Color.WHITE);        login.addActionListener(this); // Registers this class as the listener for login button events        add(login);        // Create a back button (which will exit the application), configure its properties and add a listener        back = new JButton("BACK");        back.setBounds(150, 180, 150, 30);        back.setBackground(Color.black);        back.setForeground(Color.WHITE);        back.addActionListener(this);  // Registers the listener for back button events        add(back);        // Load an image to be displayed on the login window using an ImageIcon        ImageIcon i11 = new ImageIcon(ClassLoader.getSystemResource("icons/second.jpg"));        // Resize the image to fit the login window dimensions (600x400)        Image i22 = i11.getImage().getScaledInstance(600, 400, Image.SCALE_DEFAULT);        ImageIcon i33 = new ImageIcon(i22);        JLabel imgg = new JLabel(i33);        imgg.setBounds(350, 10, 600, 400);        add(imgg);        // Load another image for decoration (background image for login)        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/LoginB.jpg"));        Image i2 = i1.getImage().getScaledInstance(600, 300, Image.SCALE_DEFAULT);        ImageIcon i3 = new ImageIcon(i2);        JLabel img = new JLabel(i3);        img.setBounds(0, 0, 600, 300);        add(img);        // Set frame properties: size, location, layout (null for absolute layout) and visibility        setSize(600, 300);        setLocation(450, 200);        setLayout(null);  // Using absolute positioning for components        setVisible(true); // Show the frame on the screen    }    // This method is triggered when an action (like a button click) occurs    @Override    public void actionPerformed(ActionEvent e) {        if (e.getSource() == login) { // When the login button is clicked...            // Retrieve text from the username and password fields            String username = tusername.getText();            String password = String.valueOf(tpassword.getPassword());            // Create a new thread to handle the network operation (sending login data to server)            new Thread(() -> {                try {                    // Compose the login request string and send it to the server                    out.println("LOGIN;" + username + ";" + password);                    // Wait for the server's response                    String serverResponse = in.readLine();                    // If the server returns "SUCCESS", then hide the login window and open Main_class window                    if ("SUCCESS".equals(serverResponse)) {                        setVisible(false);                        new Main_class();  // Open main screen on successful login                    } else {                        // If not successful, show an error message                        JOptionPane.showMessageDialog(null, "Invalid username or password");                    }                } catch (IOException ex) {                    ex.printStackTrace(); // Print stack trace if an I/O error occurs                }            }).start(); // Start the new thread        } else if (e.getSource() == back) { // When the back button is clicked...            System.exit(90);  // Exit the application with exit code 90        }    }    public static void main(String[] args) {        // Main method left empty as the Login window is generally launched elsewhere    }}